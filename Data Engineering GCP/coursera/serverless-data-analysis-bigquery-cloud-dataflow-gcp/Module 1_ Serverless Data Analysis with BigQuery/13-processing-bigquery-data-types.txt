Let's look at another example. So we'll look in this example, we looked at the WITH class and we looked at the COUNT function. In this example, what we're demonstrating here is the use of ARRAYS and the use of STRUCTS. So let's again break this query up. So, first part of this query is that we want to select the title and the date from news stories and the score. So WITH Titles selecting that every article has a title and has a score and has a date that was published. So we're going to Hacker News. And for each of those articles we are pulling out the title, the score and the date, we're grouping it by date - for every date you would basically get a bunch of news articles. So that's the inner query. Lets just make sure that that's correct. 

So I'm grouping by date, where score is not null and title is not null. They can show that it is a news article with a title and a score from this table of Hacker News stories. And from that, I'm selecting the date and there is no date field as such there's only a timestamp. So I'm using a function called extract which extracts the date from the time stamp. So the timestamp of course has a minute, hour etc. I'm just getting the date. I'm calling that date and I'm also collecting the title and the score. Before we look at the array_aggregate(array_agg), let's just look at what selecting the title and the score would do for us.

As you can see, this is not going to run because there are many titles and many scores for any specific date. So we need to do something about all of those, all of those many items that dag. One of the things that we could do is we could say go ahead and find me the maximum score and go ahead and find me the maximum title. But that doesn't really do anything for us. It's going to work but it's not all that useful because this score and this title are not related. Right? We basically just arranged the title. We've arranged all of the titles, we've arranged all of the scores but what we want, ideally is to find the title with the maximum score. So that's what we are trying to do here. Right? So that's why, what I'm going to do here is, I'm going to do an aggregation but the aggregation is going to be, take the title, take the score and combine them into an array. Right? I'm still not finding that Max. I'm just getting an array of all of the articles. So let's go ahead and try to run this and see what happens. You notice that for any date, for the date 2012-05-07, we now get a bunch of titles and the corresponding scores. So these are all of the articles that were published on that specific date. And we can go to the next date and the next date and the next date and so on. But this is basically what has happened. We've aggregated and we've gotten an array and now we can basically go ahead and process this array and try to find the article with the maximum score. So how do we do that?

So the inner query here, this SELECT ARRAY_AGG, basically finds for every date all of the articles that were published on that date and their corresponding scores. So that's what we call WITH TitlesAndScores. We're calling that result set TitlesAndScores. And from that TitlesAndScores we are selecting the date and we are taking the titles, okay. We are unnesting the titles, and getting the title and score, ordering by score, limit two. So we are finding that two highest rated articles on that particular day. So let's see, what does this do? So at this point, what we have with the inner query, is that we have a title, we have a score, we have an array of these. So what we're going to do is that we're going to process this array. So that was the inner query. The inner query basically gives us the array. And now we're selecting the date. And we are selecting for each of those dates we are looking at this array, un-nesting it, getting back title and score. And from that we are ordering it by score in descending order. So we are going to find the highest rated score first and limiting it to the first two articles. So now if we run it we're not going to get a bazillion articles on a particular day, we're going to get only two articles for every specific day. So for this day we have the two best articles. For this day we the two highest rated articles and so on
