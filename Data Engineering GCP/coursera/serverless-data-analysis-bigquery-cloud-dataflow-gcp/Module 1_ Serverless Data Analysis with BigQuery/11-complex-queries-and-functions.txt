Now, I can take that entire query that it did on the previous slide, that's the one not in bold, right? That's a nested query. So if you notice SELECT airline, departure_airport, all of that. All of this SELECT airport, departure_airport, all of this, this is basically the same query as I had on the previous slide. So it is this exact same query, so that's my inner query. And that inner query returns this result set, right, remember? It returned the airline, it returned the departure airport. It returned the number delayed, it returned the total number of flights. So now this one can be treated as a table or as a view, and now I can do a SELECT on that. So here I'm selecting airline, departure airport, number delayed, and total number of flights. Also num_delayed divided by total number of flights as the delayed fraction.

And I'm doing this only if the total number of flights is greater than 5. I'm ordering by delayed fraction in descending order. So it turns out that the airline OO leaving Atlanta, right, is the one that's delayed 72% of the time.

Okay, and again, this as for all flights arriving into Oklahoma City. We can also query from multiple tables. So this is a legacy SQL. SELECT something FROM. You basically have your project, your dataset, and your table name. My dataset is called applogs, and the table name often you basically name it by date, so events_20120501 0502 etc. But you can also do from TABLE_DATE_RANGE, project, dataset, and the prefix events_. And because the TABLE_DATE_RANGE, I'm parsing in the first one and the last one. I'm parsing it the two timestamps. And so this wildcard here matches the same set of tables. This is kind of nice, because it understands dates. So in this case, it's just 0501 0503, but imagine that if these were 0501 0603, and now you basically understand that it's basically going from May to June and it basically understands that. That's the kind of stuff that would be hard to do with just a star kind of wildcard. Okay, you can also join on fields across tables. So in this case, I have two tables. One table is the same airline flights data that we've been talking about so far. Have another data that's called just gsod. That is a weather dataset that's part of BigQuery samples. This is the project, this is that dataset, weather_geo, and this is the table name. And so, what I'm doing is I'm selecting – let's go ahead and do this, so that you kind of...

So let's do this, let's basically run this query. Okay, let's format this. Okay, so what I'm made, even before this, let's do this.

Year, month, day. So I'm selecting three columns, year, month, and day from the gsod data set where the station number is some particular number and total precipitation is greater than 0. Because total precipitation is greater than 0, these are days that are drained. So if I run, you don't want to just run this query like this because that's basically going to just return a whole bunch. That's a good practice to say LIMIT 5 here. So I'll go ahead and limit that to 5, just because I'm running it on the console, and let's go ahead and run it.

And in this case, you processed 4 and a half gigs of data. There's a lot of data here. So in year 2005, month is 5, 29, so it rained on that day at that particular station. Now, this date is different from the date that's on my flight's dataset, and I want to join by date. So rather than just use your month and day, what I'm going to do here, okay, is I'm going to basically take the year and do a hyphen, take the month and do another hyphen and do the day. And I'm basically going to call that a rainy day field. So let's, actually let's save both for method query so you see what I'm doing. So I basically have one thing we have concatenated the year, month and day. And then I have the year, month and day itself. Let's run the query So there it is, okay? So if the year is 2001, month is 3, 21, I basically get 2001, 03, 21. The reason I get 03 is that when I did the left pad, I did a left pad to two. So I basically get with zeroes, right? So I basically get left padded to two digits with a zero out front so I get 2001-03-21. This happens to be the format in which the date is present in this other table, so I've basically done this conversion. So that's what the inner query does, right so it basically takes a year, casts it as a string. Does a hyphen, does a left pad, adds a zero, all of those stuff. And basically converts into a rainy day field. And this is what I'm going to call this table AS w, okay?

And then, I'm basically taking my original on flight data, and I'm selecting the airline, I'm selecting the number delayed, I'm selecting the total number of flights. This is exactly as before. But because I'm doing a join, I need to say what I need to do a join on. I'm joining the two tables. f, which is this table, the flights table, its date, and w, which is a weather table if it's a rainy day. So only on rainy days, I'm basically finding those. And I'm basically saying WHERE the arriving_airport is LGA, LaGuardia Airport in New York City. And I'm grouping by the airline, so what does this do?

So here is the query now. I'm selecting the airline, I'm selecting the total number of flights, etc. And let's go ahead and run the query.

And you will see that it'll be only these rainy days. And only on those rainy days, this is the total number of delayed flights. So we are now restricting the flight delays to days in which it rained at the airport in question.

That station number, this station number, happens to be LaGuardia, right? So basically, I'm looking at this arrival airport. I'm looking at the corresponding weather station. And I'm saying that let's look at the delayed flights on days that have rained in LaGuardia. So, in this section what we've done is that we've basically started out very simple – looking at a table, looking at a preview of the table, finding columns, creating queries, using clauses, using inner selects, using some built-in functions like LPAD etc. Doing joints to basically find the fraction of flights that depart late from New York's La Guardia Airport and restricted to rainy days. Right. So let's go ahead and try this out. This will step you through the process of doing this, learning how to run BigQuery queries. Again the labs and the scores are not meant to show you something new, are they meant to reinforce the topics that I'm covering in the lectures. Right. All of the labs are about reinforcement, about taking these examples and showing them in a holistic way because when you look at it in a slide, I'm just going to be sure to use snippets. I'm not going to be showing you the entire code. So the labs are a way for you to go look at the entire code. So please go ahead and look at the entire code, figure out how all of the pieces go in together and fit together, and then what I strongly recommend you do is that you go to BigQuery itself. Notice that in BigQuery, right, you basically have a variety of other projects. If you are in big Query and you don't see these projects, what you can do is switch to project. And you can basically switch to project so they can say display project and then you can type the name of a project and I... One of the ones that I would say you try is BigQuery samples. Okay. And you can say now display it, and at that point Big Query samples will show up on the left hand side of your BigQuery console with a variety of data sets there. Pick one of these datasets and try to do your analysis on it, try to basically see how do I write a query to look at the Nasdaq stock quote for the Google stock, right, and figure out something about Google stock, for example. Right? So go ahead and try something out. And that's the way you learn. Right? So but first before you can try something out on your own, you should probably look at a holistic example of how something is put together and that's the purpose of these labs. So go ahead and do this lab and we will start back.
