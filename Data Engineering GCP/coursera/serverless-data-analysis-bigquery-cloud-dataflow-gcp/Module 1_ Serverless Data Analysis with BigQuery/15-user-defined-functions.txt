You also have a variety of date and time functions that operate on time stamp. We looked at being able to extract the date from a time stamp for example. The thing to realize is that BigQuery uses the epoch time, it understands UTC. You can create a date using year, month and date. You can create a date using a time stamp. You can also create a Date Time object using separate date and time objects. The standard SQL UDFs are scalar, right? So they basically give you functionality, okay? That ability to do things like loops and non-trivial string parsing. Let's take a look at an example of a SQL function. So you can do Create Temporary function. The name of the function is addFourAndDivide. X is an INT64, Y is an INT64. Those are the two parameters, and it's AS, so you're now defining it, ((x + 4) / y). WITH numbers where SELECT 1 as val UNION ALL, SELECT 3 as val UNION ALL, SELECT 4 as val UNION ALL. So we're basically selecting the val addFourAndDivide val comma 2 as a result from numbers. So we basically have a numbers array and we are just using it, but the key thing to do is look at the first part which is how you define a temporary function, addFourAndDivide. You essentially define the function, define its parameters, define their types, you say, ask, and then you basically write what that function needs to do.

You can also create external UDF components. For example here the language is JavaScript. Here's a temporary function, multi multiple inputs but it's not written in SQL, it's written in JavaScript. And so the rest of it between the three codes is all JavaScript. You can write JavaScripts UDF's, you can write SQL UDF's There are some constraints as far as user-defined functions are concerned. UDFs can't return way too much data – they need to return reasonable amounts of data, less than 5 meg. You can't run lots of JavaScript UDFs concurrently – you can only run six at the time that we're recording here. You can't do native code JavaScript – there's only things that can run within a sandbox. And JavaScript is a 32-bit language inside BigQuery so even though BigQuery has int64s, it's only gonna use at most significant 32 bits.
